// Bit by bit hash function base on XOR.
// Should work in one clock cycle.
// The parameters file may befine multiple hash functions.
// It is generated by a python script.
// The function used is determined by the HASH_ID parameter.

`timescale 1ns / 1ps

`include "config/hash_parameters.v"

module simple_hash(
    input [`HASH_WORD_WIDTH-1:0] data_in,
    output [`HASH_RESULT_WIDTH-1:0] data_out
    );
    parameter HASH_ID = 0;
    
    // Local variables
    wire [`HASH_RESULT_WIDTH-1:0] data_tmp [0:`HASH_WORD_WIDTH-1];
    wire [`HASH_RESULT_WIDTH-1:0] data_init;
    assign data_init = `HASH_INIT;
    
    generate
        genvar bit_id, bit_offset;
        for (bit_id = 0; bit_id < `HASH_RESULT_WIDTH; bit_id = bit_id + 1) begin: bit_block
            // for each output bit
            for (bit_offset = 0; bit_offset < `HASH_WORD_WIDTH; bit_offset = bit_offset + 1) begin: link_block
                // for each input bit
                if (bit_offset == 0) begin
                    // initial value
                    if ((`HASH_LOC >> bit_offset) & 1)
                        assign data_tmp[0][bit_id] = data_init[bit_id] ^ data_in[bit_offset];
                    else
                        assign data_tmp[0][bit_id] = data_init[bit_id];
                end else begin
                    if ((`HASH_LOC >> bit_offset) & 1)
                        assign data_tmp[bit_offset][bit_id] = data_tmp[bit_offset-1][bit_id] ^ data_in[bit_offset];
                    else
                        assign data_tmp[bit_offset][bit_id] = data_tmp[bit_offset-1][bit_id];
                end
            end
        end
    endgenerate
    
    // Get the result
    assign data_out = data_tmp[`HASH_WORD_WIDTH-1];
endmodule
